{"version":3,"sources":["index.js"],"names":["Backdrop","useState","theme","setTheme","quotes","setQuotes","status","setStatus","quote","author","hashtag","quotePack","setQuotePack","url","prevC","randomize","ranMax","Math","floor","random","useEffect","a","fetch","response","json","data","fetchData","catch","console","log","length","onNewQuote","newT","newQ","Promise","resolve","setTimeout","id","style","backgroundColor","Expander","QuoteBox","getQuote","props","animation","q","map","taggy","ind","b","src","alt","className","color","window","innerWidth","TweetButton","NewQuoteButton","onClick","t","h","join","tweetUrl","encodeURIComponent","href","target","rel","disabled","ReactDOM","render","document","getElementById"],"mappings":"kMAMMA,EAAS,WAAI,MAEQC,mBAAS,GAFjB,mBAERC,EAFQ,KAEFC,EAFE,OAIUF,mBAAS,IAJnB,mBAIRG,EAJQ,KAIDC,EAJC,OAMUJ,mBAAS,QANnB,mBAMRK,EANQ,KAMDC,EANC,OAQgBN,mBAAS,CAACO,MAAM,GAAGC,OAAO,GAAGC,QAAQ,KARrD,mBAQRC,EARQ,KAQEC,EARF,OAUHX,mBAAS,iGAAdY,EAVQ,oBAWXC,EAAM,EAGAC,EAAU,SAAAC,GAAM,OAAGC,KAAKC,MAAMD,KAAKE,SAASH,IAGtDI,qBAAU,WACDP,GACU,uCAAC,8BAAAQ,EAAA,6DACZd,EAAU,YADE,SAEae,MAAMT,GAFnB,cAEFU,EAFE,gBAGSA,EAASC,OAHlB,OAGFC,EAHE,OAKZpB,EAAUoB,EAAKrB,QACfG,EAAU,QANE,2CAAD,oDAQfmB,GAAYC,MAAMC,QAAQC,OAC5B,CAAChB,IAGHO,qBAAU,WACc,IAAhBhB,EAAO0B,SAEX3B,EAASY,EAAU,IACnBH,EAAaR,EAAOW,EAAUX,EAAO0B,aAGvC,CAAC1B,IAGHgB,qBAAU,WACNQ,QAAQC,IAAIvB,KACd,CAACA,IAOH,IAAMyB,EAAU,uCAAE,8BAAAV,EAAA,sDAGd,IAFAd,EAAU,QACNyB,EAAK9B,EACF8B,IAAO9B,GAAO8B,EAAKjB,EAAU,GAGpC,IAFAZ,EAAS6B,GACLC,EAAKtB,EACFsB,IAAOtB,GAAWsB,EAAK7B,EAAOW,EAAUX,EAAO0B,SANxC,OAOdlB,EAAaqB,GAPC,SAQR,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAS,QARnC,OASdrB,EAAMZ,EAENK,EAAU,QAXI,4CAAF,qDAgBhB,OACI,sBACI8B,GAAG,WACHC,MAAO,CAACC,gBAAyB,SAATjC,EAAgBQ,EAAhB,wBAAuCZ,EAAvC,MAF5B,UAIQ,cAACsC,EAAD,CAAUtC,MAAOA,EAAOI,OAASA,IACjC,cAACmC,EAAD,CAAUC,SAAUX,EAAYvB,MAAOG,EAAWT,MAAOA,EAAOI,OAAQA,QAMlFkC,EAAU,SAAAG,GACZ,OACI,qBAAKN,GAAG,WACJC,MAAO,CAACC,gBAAgB,iBAAD,OAAkBI,EAAMzC,MAAxB,KACf0C,UAAyB,SAAfD,EAAMrC,OAAgB,eAAe,WAK7DmC,EAAS,SAAAE,GACX,IAAME,EAAI,sBAAKR,GAAG,YAAR,UACE,oBAAIA,GAAG,WAAP,SAAmBM,EAAMnC,MAAME,QAAQoC,KAAI,SAACC,EAAMC,GAAP,OAAa,mCAAgBD,IAAPC,QACjE,mBAAGX,GAAG,OAAN,SAAcM,EAAMnC,MAAMA,QAC1B,oBAAG6B,GAAG,SAAN,cAAiBM,EAAMnC,MAAMC,aAEnCwC,EAAI,qBAAKC,IAAI,+FAA+FC,IAAI,UAAUC,UAAU,mBAE1I,OACI,sBACIf,GAAG,YACHC,MAAO,CAACC,gBAAgB,kBAAD,OAAmBI,EAAMzC,MAAzB,KACfmD,MAAM,kBAAD,OAAmBV,EAAMzC,MAAzB,KACL0C,UAAyB,SAAfD,EAAMrC,OAAgBgD,OAAOC,YAAY,IAAnB,+BAAsD,QAJlG,UAM4B,SAAfZ,EAAMrC,OAAgB2C,EAAEJ,EAEzB,sBAAKR,GAAG,aAAR,UACI,cAACmB,EAAD,CAAatD,MAAOyC,EAAMzC,MAAOM,MAAOmC,EAAMnC,MAAOF,OAAQqC,EAAMrC,SACnE,cAACmD,EAAD,CAAgBC,QAASf,EAAMD,SAAUxC,MAAOyC,EAAMzC,MAAOI,OAAQqC,EAAMrC,gBAS7FkD,EAAY,SAAAb,GACd,IAAMM,EAAI,qBAAKC,IAAI,+FAA+FC,IAAI,UAAUC,UAAU,UACpIO,EAAG,mBAAGP,UAAU,mBAChBQ,EAAEjB,EAAMnC,MAAME,QAAQmD,KAAK,KAC3BC,EAAS,6CAAD,OAA8CF,EAA9C,sCAA6EG,mBAAmB,IAAIpB,EAAMnC,MAAMA,MAAM,KAAKmC,EAAMnC,MAAMC,SACrJ,OACI,mBACI4B,GAAG,cACHe,UAA0B,SAAfT,EAAMrC,OAAgB,gBAAgB,SACjD0D,KAAqB,SAAfrB,EAAMrC,OAAgB,IAAIwD,EAChCG,OAAO,SACPC,IAAI,aACJ5B,MAAO,CAACC,gBAA+B,SAAfI,EAAMrC,OAAgB,OAAtB,wBAA8CqC,EAAMzC,MAApD,KAChBmD,MAAM,kBAAD,OAAmBV,EAAMzC,MAAzB,MAPjB,SAQwB,SAAfyC,EAAMrC,OAAgB2C,EAAEU,KAMnCF,EAAe,SAAAd,GACjB,IAAMM,EAAI,qBAAKC,IAAI,+FAA+FC,IAAI,UAAUC,UAAU,UAC1I,OACI,wBACIf,GAAG,YACHe,UAA0B,SAAfT,EAAMrC,OAAgB,gBAAgB,SACjDoD,QAAwB,SAAff,EAAMrC,OAAgB,KAAKqC,EAAMe,QAC1CpB,MAAO,CAACC,gBAA+B,SAAfI,EAAMrC,OAAgB,OAAtB,wBAA8CqC,EAAMzC,MAApD,KAChBmD,MAAM,kBAAD,OAAmBV,EAAMzC,MAAzB,MACTiE,SAAyB,SAAfxB,EAAMrC,OANxB,SAOwB,SAAfqC,EAAMrC,OAAgB2C,EAAE,eAKzCmB,IAASC,OAAO,cAACrE,EAAD,IAAasE,SAASC,eAAe,W","file":"static/js/main.16a5472a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\n\r\nconst Backdrop=()=>{\r\n    //what color theme to use \r\n    const [theme,setTheme]=useState(0);\r\n    //the entirety of quotes.json\r\n    const [quotes,setQuotes]=useState([]);\r\n    //data fetching/quote setting status\r\n    const [status,setStatus]=useState('idle');\r\n    //one quote/author passed to QuoteBOx\r\n    const [quotePack,setQuotePack]=useState({quote:'',author:'',hashtag:[]});\r\n    //url of quotes.json\r\n    const [url]=useState(\"https://raw.githubusercontent.com/MatchaCrisp/RandomQuote.github.io/main/src/data/quotes.json\");\r\n    let prevC=0;\r\n\r\n        //random theme/quote\r\n        const randomize=ranMax=> Math.floor(Math.random()*ranMax);\r\n\r\n    //fetching quotes.json\r\n    useEffect(()=>{\r\n        if (!url)return;\r\n        const fetchData=async ()=>{\r\n            setStatus('fetching');\r\n                const response=await fetch(url);\r\n                const data=await response.json();\r\n\r\n            setQuotes(data.quotes);\r\n            setStatus('idle');\r\n        }\r\n        fetchData().catch(console.log);\r\n    },[url]);\r\n\r\n    //initialize first quote\r\n    useEffect(()=>{\r\n        if (quotes.length===0) return;\r\n\r\n        setTheme(randomize(9));\r\n        setQuotePack(quotes[randomize(quotes.length)]);\r\n        \r\n        \r\n    },[quotes]);\r\n\r\n    //loading screen at beginning while fetching, disable buttons while setting quotes\r\n    useEffect(()=>{\r\n        console.log(status);\r\n    },[status]);\r\n\r\n\r\n\r\n\r\n\r\n    //onclick for when new quote button is pressed\r\n    const onNewQuote= async()=>{\r\n        setStatus('busy');\r\n        let newT=theme;\r\n        while (newT===theme) newT=randomize(9);\r\n        setTheme(newT);\r\n        let newQ=quotePack;\r\n        while (newQ===quotePack) newQ=quotes[randomize(quotes.length)];\r\n        setQuotePack(newQ);\r\n        await new Promise(resolve => setTimeout(resolve, 400));\r\n        prevC=theme;\r\n\r\n        setStatus('idle');\r\n    };\r\n\r\n    \r\n    //delay loading of backdrop until expander fills screen\r\n    return (\r\n        <div \r\n            id=\"backdrop\"\r\n            style={{backgroundColor:status===\"busy\"?prevC:`var(--col-pri-${theme})`}} \r\n            >\r\n                <Expander theme={theme} status ={status} />\r\n                <QuoteBox getQuote={onNewQuote} quote={quotePack} theme={theme} status={status}/>\r\n        </div>\r\n    )\r\n};\r\n\r\n//fills screen in 450ms when changing quotes, default is 0 size middle of screen\r\nconst Expander =props =>{\r\n    return (\r\n        <div id=\"backAnim\"\r\n            style={{backgroundColor:`var(--col-pri-${props.theme})`,\r\n                    animation:props.status===\"busy\"?'expand 450ms':'none'}} />\r\n    )\r\n}\r\n\r\n//content box, when changing quotes displays loading animation and bounces\r\nconst QuoteBox=props=>{\r\n    const q = <div id=\"contQuote\">\r\n                <ul id=\"hashtags\">{props.quote.hashtag.map((taggy,ind)=><li key={ind}>#{taggy}</li>)}</ul>\r\n                <p id=\"text\">{props.quote.quote}</p>\r\n                <p id=\"author\">-{props.quote.author}</p>\r\n            </div>\r\n    const b = <img src=\"https://raw.githubusercontent.com/MatchaCrisp/RandomQuote.github.io/main/src/img/loading.gif\" alt=\"loading\" className=\"large centered\"/>\r\n   \r\n    return (\r\n        <div \r\n            id='quote-box' \r\n            style={{backgroundColor:`var(--col-acc1-${props.theme})`,\r\n                    color:`var(--col-txt1-${props.theme})`,\r\n                    animation:props.status===\"busy\"?window.innerWidth>=769?`bouncy2 400ms`:`bouncy 400ms`:'none'}}>\r\n\r\n                    {props.status!=='idle'?b:q}\r\n                    \r\n                    <div id=\"contButton\">\r\n                        <TweetButton theme={props.theme} quote={props.quote} status={props.status}/>\r\n                        <NewQuoteButton onClick={props.getQuote} theme={props.theme} status={props.status}/>\r\n                    </div>\r\n\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\n//displays loading animation and is disabled when changing quotes, adds custom hashtags to tweet\r\nconst TweetButton=props=>{\r\n    const b = <img src=\"https://raw.githubusercontent.com/MatchaCrisp/RandomQuote.github.io/main/src/img/loading.gif\" alt=\"loading\" className=\"small\"/>\r\n    const t= <i className=\"fab fa-twitter\"></i>\r\n    const h=props.quote.hashtag.join(',');\r\n    const tweetUrl=`https://twitter.com/intent/tweet?hashtags=${h}&related=freecodecamp&text=${encodeURIComponent('\"'+props.quote.quote+'\" '+props.quote.author)}`;\r\n    return (\r\n        <a \r\n            id='tweet-quote'\r\n            className={props.status!=='idle'?'disableButton':'button'} \r\n            href={props.status!=='idle'?'#':tweetUrl}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n            style={{backgroundColor:props.status!=='idle'?\"grey\":`var(--col-pri-${props.theme})`,\r\n                    color:`var(--col-acc2-${props.theme})`}}>\r\n                {props.status!=='idle'?b:t}\r\n        </a>\r\n    )\r\n};\r\n\r\n//displays loading animation and is disabled when changing quotes\r\nconst NewQuoteButton=props=>{\r\n    const b = <img src=\"https://raw.githubusercontent.com/MatchaCrisp/RandomQuote.github.io/main/src/img/loading.gif\" alt=\"loading\" className=\"small\"/>\r\n    return (\r\n        <button \r\n            id='new-quote'\r\n            className={props.status!=='idle'?'disableButton':'button'} \r\n            onClick={props.status!=='idle'?null:props.onClick} \r\n            style={{backgroundColor:props.status!=='idle'?\"grey\":`var(--col-pri-${props.theme})`,\r\n                    color:`var(--col-acc2-${props.theme})`}}\r\n                disabled={props.status!=='idle'}>\r\n                {props.status!=='idle'?b:'New Quote'}\r\n        </button>\r\n    )\r\n};\r\n\r\nReactDOM.render(<Backdrop />,document.getElementById('root'));\r\n"],"sourceRoot":""}